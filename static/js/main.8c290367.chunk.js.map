{"version":3,"sources":["Box.js","BoxList.js","NewBoxForm.js","App.js","serviceWorker.js","index.js"],"names":["Box","height","width","color","deleteBox","className","style","backgroundColor","onClick","e","preventDefault","BoxList","boxes","map","box","key","uuidv4","NewBoxForm","onSubmit","useState","boxFields","setBoxFields","handleInputChange","target","name","value","htmlFor","type","id","onChange","App","setBoxes","filter","b","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAuBeA,G,MApBH,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAMnC,OACE,yBACEC,UAAU,MACVC,MAAO,CACLL,OAAO,GAAD,OAAKA,EAAL,MACNC,MAAM,GAAD,OAAKA,EAAL,MACLK,gBAAiBJ,IAGnB,4BAAQK,QAdU,SAAAC,GACpBA,EAAEC,iBACFN,MAYE,QCHSO,G,MAVC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOR,EAAgB,EAAhBA,UACxB,OACE,yBAAKC,UAAU,WACZO,EAAMC,KAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,iBAASA,EAAT,CAAcC,IAAKC,cAAUZ,UAAW,kBAAMA,EAAUU,a,cCqDjDG,EA5DI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACDC,mBAAS,CACzClB,OAAQ,GACRC,MAAO,GACPC,MAAO,KAJ0B,mBAC5BiB,EAD4B,KACjBC,EADiB,KAO7BC,EAAoB,SAAAb,GACxBY,EAAa,eAAKD,EAAN,eAAkBX,EAAEc,OAAOC,KAAOf,EAAEc,OAAOE,UAezD,OACE,8BACE,yBAAKpB,UAAU,IACb,2BAAOqB,QAAQ,UAAf,UACA,2BACEC,KAAK,OACLH,KAAK,SACLC,MAAOL,EAAUnB,OACjB2B,GAAG,SACHC,SAAUP,KAGd,yBAAKjB,UAAU,IACb,2BAAOqB,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLH,KAAK,QACLC,MAAOL,EAAUlB,MACjB0B,GAAG,QACHC,SAAUP,KAGd,yBAAKjB,UAAU,IACb,2BAAOqB,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLH,KAAK,QACLC,MAAOL,EAAUjB,MACjByB,GAAG,QACHC,SAAUP,KAGd,4BAAQd,QA5CQ,SAAAC,GAClBA,EAAEC,iBACEU,EAAUnB,OAAS,GAAKmB,EAAUlB,MAAQ,IAC5CgB,EAASE,GACTC,EAAa,CACXpB,OAAQ,GACRC,MAAO,GACPC,MAAO,QAqCT,kBChCS2B,MApBf,WAAgB,IAAD,EACaX,mBAAS,CAAC,CAAEjB,MAAO,GAAID,OAAQ,GAAIE,MAAO,SADvD,mBACNS,EADM,KACCmB,EADD,KAWb,OACE,yBAAK1B,UAAU,OACb,uDACA,kBAAC,EAAD,CAAYa,SAXK,SAAAE,GACnBW,EAAS,GAAD,mBAAKnB,GAAL,CAAYQ,QAWlB,kBAAC,EAAD,CAASR,MAAOA,EAAOR,UARH,SAAAU,GACtBiB,EAAS,YAAInB,EAAMoB,QAAO,SAAAC,GAAC,OAAIA,IAAMnB,YCDrBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c290367.chunk.js","sourcesContent":["import React from 'react';\nimport './Box.css';\n\nconst Box = ({ height, width, color, deleteBox }) => {\n  const onDeleteClick = e => {\n    e.preventDefault();\n    deleteBox();\n  };\n\n  return (\n    <div\n      className='Box'\n      style={{\n        height: `${height}em`,\n        width: `${width}em`,\n        backgroundColor: color\n      }}\n    >\n      <button onClick={onDeleteClick}>X</button>\n    </div>\n  );\n};\n\nexport default Box;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Box from './Box';\nimport './BoxList.css';\n\nconst BoxList = ({ boxes, deleteBox }) => {\n  return (\n    <div className='BoxList'>\n      {boxes.map(box => (\n        <Box {...box} key={uuidv4()} deleteBox={() => deleteBox(box)} />\n      ))}\n    </div>\n  );\n};\n\nexport default BoxList;\n","import React, { useState } from 'react';\n\nconst NewBoxForm = ({ onSubmit }) => {\n  const [boxFields, setBoxFields] = useState({\n    height: '',\n    width: '',\n    color: ''\n  });\n\n  const handleInputChange = e => {\n    setBoxFields({ ...boxFields, [e.target.name]: e.target.value });\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    if (boxFields.height > 0 && boxFields.width > 0) {\n      onSubmit(boxFields);\n      setBoxFields({\n        height: '',\n        width: '',\n        color: ''\n      });\n    }\n  };\n\n  return (\n    <form>\n      <div className=''>\n        <label htmlFor='height'>Height</label>\n        <input\n          type='text'\n          name='height'\n          value={boxFields.height}\n          id='height'\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=''>\n        <label htmlFor='width'>Width</label>\n        <input\n          type='text'\n          name='width'\n          value={boxFields.width}\n          id='width'\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=''>\n        <label htmlFor='color'>Color</label>\n        <input\n          type='text'\n          name='color'\n          value={boxFields.color}\n          id='color'\n          onChange={handleInputChange}\n        />\n      </div>\n      <button onClick={handleClick}>Add New Box!</button>\n    </form>\n  );\n};\n\nexport default NewBoxForm;\n","import React, { useState } from 'react';\nimport './App.css';\nimport BoxList from './BoxList';\nimport NewBoxForm from './NewBoxForm';\n\nfunction App() {\n  const [boxes, setBoxes] = useState([{ width: 10, height: 20, color: 'red' }]);\n\n  const handleSubmit = boxFields => {\n    setBoxes([...boxes, boxFields]);\n  };\n\n  const handleDeleteBox = box => {\n    setBoxes([...boxes.filter(b => b !== box)]);\n  };\n\n  return (\n    <div className='App'>\n      <h1>Color Boxer Maker Thing</h1>\n      <NewBoxForm onSubmit={handleSubmit} />\n      <BoxList boxes={boxes} deleteBox={handleDeleteBox} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}